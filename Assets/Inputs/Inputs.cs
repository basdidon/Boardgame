//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Inputs/Inputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Inputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Inputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Inputs"",
    ""maps"": [
        {
            ""name"": ""BaseGameplay"",
            ""id"": ""af1452e6-7557-44ee-ae86-8b0a744b79ec"",
            ""actions"": [
                {
                    ""name"": ""Roll"",
                    ""type"": ""PassThrough"",
                    ""id"": ""cbea3001-0e0e-4764-8657-71f4604df5fe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f9087700-dbba-4c1d-a73c-f5974cfc9c6d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EndTurn"",
                    ""type"": ""Button"",
                    ""id"": ""bfb83f9a-f302-4b60-829d-7ec25d91a883"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3177e9c0-3564-46a9-a714-ba0642878708"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""e2c53c13-4acb-4584-9790-305d93284a7f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4a4e70aa-a2e2-4a20-bc3e-3d2b58a172fe"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ddbe039e-6c2d-4c87-870f-513f3f85c6fa"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7ac85b8a-20ce-4e09-873f-be56a5023eb3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a092af9a-5444-4060-9587-cd4af4d6eb60"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5c338b49-f0f7-4e1a-ab98-742e4b8d576a"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EndTurn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SelectTarget"",
            ""id"": ""fc3088a6-d5f0-4790-9824-e4fca92e7c3f"",
            ""actions"": [
                {
                    ""name"": ""CursorPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""6b4d3851-38ea-4f4d-a50a-db1512dcc417"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftClick"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f6409d36-0ea8-4591-88a8-149ae1696dce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancle"",
                    ""type"": ""PassThrough"",
                    ""id"": ""6eb687b0-6398-49d6-8856-41514ec4eb5f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""27066424-8348-4df0-8e68-eb3655a7e93c"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CursorPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f2a9fa8e-d2c3-4f80-a219-5a3a4c0db81f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""52dcbc74-9987-4dff-9635-570d1505450e"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // BaseGameplay
        m_BaseGameplay = asset.FindActionMap("BaseGameplay", throwIfNotFound: true);
        m_BaseGameplay_Roll = m_BaseGameplay.FindAction("Roll", throwIfNotFound: true);
        m_BaseGameplay_Movement = m_BaseGameplay.FindAction("Movement", throwIfNotFound: true);
        m_BaseGameplay_EndTurn = m_BaseGameplay.FindAction("EndTurn", throwIfNotFound: true);
        // SelectTarget
        m_SelectTarget = asset.FindActionMap("SelectTarget", throwIfNotFound: true);
        m_SelectTarget_CursorPosition = m_SelectTarget.FindAction("CursorPosition", throwIfNotFound: true);
        m_SelectTarget_LeftClick = m_SelectTarget.FindAction("LeftClick", throwIfNotFound: true);
        m_SelectTarget_Cancle = m_SelectTarget.FindAction("Cancle", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BaseGameplay
    private readonly InputActionMap m_BaseGameplay;
    private List<IBaseGameplayActions> m_BaseGameplayActionsCallbackInterfaces = new List<IBaseGameplayActions>();
    private readonly InputAction m_BaseGameplay_Roll;
    private readonly InputAction m_BaseGameplay_Movement;
    private readonly InputAction m_BaseGameplay_EndTurn;
    public struct BaseGameplayActions
    {
        private @Inputs m_Wrapper;
        public BaseGameplayActions(@Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Roll => m_Wrapper.m_BaseGameplay_Roll;
        public InputAction @Movement => m_Wrapper.m_BaseGameplay_Movement;
        public InputAction @EndTurn => m_Wrapper.m_BaseGameplay_EndTurn;
        public InputActionMap Get() { return m_Wrapper.m_BaseGameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BaseGameplayActions set) { return set.Get(); }
        public void AddCallbacks(IBaseGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_BaseGameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BaseGameplayActionsCallbackInterfaces.Add(instance);
            @Roll.started += instance.OnRoll;
            @Roll.performed += instance.OnRoll;
            @Roll.canceled += instance.OnRoll;
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @EndTurn.started += instance.OnEndTurn;
            @EndTurn.performed += instance.OnEndTurn;
            @EndTurn.canceled += instance.OnEndTurn;
        }

        private void UnregisterCallbacks(IBaseGameplayActions instance)
        {
            @Roll.started -= instance.OnRoll;
            @Roll.performed -= instance.OnRoll;
            @Roll.canceled -= instance.OnRoll;
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @EndTurn.started -= instance.OnEndTurn;
            @EndTurn.performed -= instance.OnEndTurn;
            @EndTurn.canceled -= instance.OnEndTurn;
        }

        public void RemoveCallbacks(IBaseGameplayActions instance)
        {
            if (m_Wrapper.m_BaseGameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBaseGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_BaseGameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BaseGameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BaseGameplayActions @BaseGameplay => new BaseGameplayActions(this);

    // SelectTarget
    private readonly InputActionMap m_SelectTarget;
    private List<ISelectTargetActions> m_SelectTargetActionsCallbackInterfaces = new List<ISelectTargetActions>();
    private readonly InputAction m_SelectTarget_CursorPosition;
    private readonly InputAction m_SelectTarget_LeftClick;
    private readonly InputAction m_SelectTarget_Cancle;
    public struct SelectTargetActions
    {
        private @Inputs m_Wrapper;
        public SelectTargetActions(@Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @CursorPosition => m_Wrapper.m_SelectTarget_CursorPosition;
        public InputAction @LeftClick => m_Wrapper.m_SelectTarget_LeftClick;
        public InputAction @Cancle => m_Wrapper.m_SelectTarget_Cancle;
        public InputActionMap Get() { return m_Wrapper.m_SelectTarget; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SelectTargetActions set) { return set.Get(); }
        public void AddCallbacks(ISelectTargetActions instance)
        {
            if (instance == null || m_Wrapper.m_SelectTargetActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SelectTargetActionsCallbackInterfaces.Add(instance);
            @CursorPosition.started += instance.OnCursorPosition;
            @CursorPosition.performed += instance.OnCursorPosition;
            @CursorPosition.canceled += instance.OnCursorPosition;
            @LeftClick.started += instance.OnLeftClick;
            @LeftClick.performed += instance.OnLeftClick;
            @LeftClick.canceled += instance.OnLeftClick;
            @Cancle.started += instance.OnCancle;
            @Cancle.performed += instance.OnCancle;
            @Cancle.canceled += instance.OnCancle;
        }

        private void UnregisterCallbacks(ISelectTargetActions instance)
        {
            @CursorPosition.started -= instance.OnCursorPosition;
            @CursorPosition.performed -= instance.OnCursorPosition;
            @CursorPosition.canceled -= instance.OnCursorPosition;
            @LeftClick.started -= instance.OnLeftClick;
            @LeftClick.performed -= instance.OnLeftClick;
            @LeftClick.canceled -= instance.OnLeftClick;
            @Cancle.started -= instance.OnCancle;
            @Cancle.performed -= instance.OnCancle;
            @Cancle.canceled -= instance.OnCancle;
        }

        public void RemoveCallbacks(ISelectTargetActions instance)
        {
            if (m_Wrapper.m_SelectTargetActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISelectTargetActions instance)
        {
            foreach (var item in m_Wrapper.m_SelectTargetActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SelectTargetActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SelectTargetActions @SelectTarget => new SelectTargetActions(this);
    public interface IBaseGameplayActions
    {
        void OnRoll(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
        void OnEndTurn(InputAction.CallbackContext context);
    }
    public interface ISelectTargetActions
    {
        void OnCursorPosition(InputAction.CallbackContext context);
        void OnLeftClick(InputAction.CallbackContext context);
        void OnCancle(InputAction.CallbackContext context);
    }
}
